plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.13'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.openapi.generator' version '7.16.0'
    id 'org.flywaydb.flyway' version '9.22.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

// Centralized version management
ext {
    postgresqlVersion = '42.6.0'
    flywayVersion = '9.21.2'
}

// Java toolchain
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// Repositories
repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

// Dependencies
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
//    implementation 'io.springfox:springfox-oas:3.0.0'
//    implementation platform('org.springframework.boot:spring-boot-dependencies:3.5.6')
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.15'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly "org.postgresql:postgresql:${postgresqlVersion}"

    implementation "org.flywaydb:flyway-core:${flywayVersion}"
//    implementation "org.flywaydb:flyway-database-postgresql:${flywayVersion}"

    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    compileOnly 'org.projectlombok:lombok:1.18.30'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.3'

    testImplementation 'org.testcontainers:testcontainers:1.19.7'
    testImplementation 'org.testcontainers:postgresql:1.19.7'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// OpenAPI configuration
def openApiSpecPath = "$rootDir/src/main/resources/api/openapi.yaml"

openApiGenerate {
    generatorName = "spring"
    inputSpec = openApiSpecPath
    outputDir = "$buildDir/generated-sources/openapi"
    configFile = "$rootDir/src/main/resources/api/config.json"
    configOptions = [
            apiPackage: "com.example.ecommercedemo.api",
            modelPackage: "com.example.ecommercedemo.model"
//      useJakartaEe: "true",
//      dateLibrary: "java8",
//      interfaceOnly: "true",
//      skipDefaultInterface: "true",
//      useTags: "true",
//      bigDecimalType: "BigDecimal",
//      useBigDecimals: "true"
    ]
    ignoreFileOverride = "$rootDir/src/main/resources/api/.openapi-generator-ignore"
}

tasks.openApiGenerate {
    doFirst {
        def specFile = file(openApiSpecPath)
        if (!specFile.exists()) {
            throw new GradleException("OpenAPI spec file not found: $specFile")
        }
    }
}

tasks.compileJava {
    dependsOn tasks.openApiGenerate
}

afterEvaluate {
    sourceSets.main.java.srcDirs += file("$buildDir/generated-sources/openapi/src/main/java")
}

// Compiler options
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
            "-Xlint:unchecked",
            "-Xlint:deprecation"
    ]
}

// Integration test setup
sourceSets {
    main {
        java {
            srcDir("$buildDir/generated-sources/openapi/src/main/java")
        }
    }
    integrationTest {
        java.srcDir file('src/integrationTest/java')
        resources.srcDir file('src/integrationTest/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter("test")
    useJUnitPlatform()
}

tasks.named('check') {
    dependsOn(tasks.named('integrationTest'))
}

tasks.named('test') {
    useJUnitPlatform()
}

// Spring Boot main class
springBoot {
    mainClass = 'com.example.ecommercedemo.EcommerceDemoApplication'
}

// Flyway configuration
flyway {
    url = 'jdbc:postgresql://localhost:5432/ecomm'
    user = 'packt'
    password = 'packt'
//  locations = ['filesystem:src/main/resources/db/migration']
}
